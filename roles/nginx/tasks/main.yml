---
- name: install nginx centos version...
  dnf: 
      name: nginx
      state: present
      update_cache: yes

#si fuera necesario instalar el httplib2, así se instala
#pero la dependencia de httplib2 se eliminó en ansible 2.1.

- name: instalar httplib desde powertools
  dnf: 
      name: python3-httplib2
      update_cache: yes
# ojo, powertools todo minúscula...         
      enablerepo: powertools
      state: present

- debug:
    var: q('dict', sites)|list # perfecto, contenido completo del diccionario

#ojo, aca con template estoy generando el sitio de item.key
#pero no estoy borrando si ya está configurado...

- name: configure nginx site
  template: 
    src: nginx.conf.j2 
    dest: /etc/nginx/conf.d/{{item.key}}.conf
    mode: '0644'
  loop: "{{ q('dict', sites) }}"
  notify: restart nginx
  

#=========================================================================
#----- PARA DESACTIVAR EL DEFAULT SITE HAY QUE MODIFICAR 
#-----
#----- el archivo /etc/nginx/conf.d/demo.conf
#-----
#----- comentando las opciones de server que utiliza
#-----
#-> comentar        listen       80 default_server;
#-> comentar        listen       [::]:80 default_server;
#-> comentar        server_name  _;
#-> comentar        root         /usr/share/nginx/html;
#en definitiva queda así
# # # # # # # # # # # #   upstream demo {
# # # # # # # # # # # #      server app01;
# # # # # # # # # # # #      server app02;
# # # # # # # # # # # #  }

# # # # # # # # # # # #   server {
# # # # # # # # # # # #       listen 80;

# # # # # # # # # # # #       location / {
# # # # # # # # # # # #           proxy_pass http://demo;
# # # # # # # # # # # #       }
# # # # # # # # # # # #   }
# # # # # # # # # # # #   #        listen       80 default_server;
# # # # # # # # # # # #   #        listen       [::]:80 default_server;
# # # # # # # # # # # #   #        server_name  _;
# # # # # # # # # # # #   #        root         /usr/share/nginx/html;

#========================================================================
#    - name: de-activate default nginx site
#      file: 
#        path: /etc/nginx/sites-enabled/default 
#        path: /etc/nginx/nginx.conf
#si borro este archivo no levanta nginx
    #        state: absent
#      notify: restart nginx

# - name: activate demo nginx site
#   file: 
#     src: /etc/nginx/sites-available/demo 
#     dest: /etc/nginx/sites-enabled/demo 
#     state: link
#   not

- name: obtener sitios activos, dado que generan un archivo [SITIO].conf
  shell: ls -1t /etc/nginx/conf.d | cut -d "." -f1
  register: sitios_activos

#https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html
- debug:
    var: sitios_activos.stdout_lines #perfecto, lista de sitios.

- debug:
    var: q('dict', sites) # perfecto, contenido completo del diccionario

- debug:
    var: q('dict', sites)|list # perfecto, contenido completo del diccionario

#https://docs.ansible.com/ansible/2.9/plugins/lookup/dict.html
- debug:
    msg: "Encontrado sitio {{item.key}} tiene backend {{item.value.backend}} y frontend {{item.value.frontend}}"
  loop: "{{q('dict',sites)}}"

#https://docs.ansible.com/ansible/2.9/plugins/lookup/list.html
- debug:
    msg: "Encontrado sitio activo {{item}}"
  with_list: "{{sitios_activos.stdout_lines}}"

#https://docs.ansible.com/ansible/2.9/user_guide/playbooks_loops.html
- debug:
        msg: "nested loop: El sitio activo {{item[1]}} lo comparo con uno que debo tener {{item[0].key}}"
  with_nested:
    - "{{q('dict',sites)}}"
    - "{{sitios_activos.stdout_lines}}"

#https://docs.ansible.com/ansible/2.9/user_guide/playbooks_loops.html
- debug:
        msg: "EN LOOP: El sitio activo {{item[1]}} lo comparo con uno que debo tener {{item[0].key}}"
  loop: "{{q('dict',sites)| product(sitios_activos.stdout_lines)|list}}"

- debug:
        msg: "desde with_nested: El sitio activo {{item[1]}} debe ser desactivado porque no es {{item[0].key}}"
  with_nested:
    - "{{q('dict',sites)}}"
    - "{{sitios_activos.stdout_lines}}"    
  when: item[1] != item[0].key

- debug:
        msg: "desde LOOP: El sitio activo {{item[1]}} debe ser desactivado porque no es {{item[0].key}}"
  loop: "{{q('dict',sites)| product(sitios_activos.stdout_lines)|list}}"
  when: item[1] != item[0].key

- name: Desactivando los sitos que no estén en la clave de variable sitio 1/5 linea listen 80 default_server
  lineinfile:
    path: /etc/nginx/conf.d/{{item[1]}}.conf
    regexp: '^        listen       80 default_server;'
    line:   '#        listen       80 default_server;'
  loop: "{{q('dict',sites)| product(sitios_activos.stdout_lines)|list}}"
  when: item[1] != item[0].key
  notify: restart nginx

#en vez de de desactivar el sitio por defecto ahora se van a desactivar
#todos los sitios en la proximas tres task.
#https://nginx.org/en/docs/http/load_balancing.html
- name: Desactivando los sitos que no estén en la clave de variable sitio 2/5 linea listen  [::]:80 default_server
  lineinfile:
    path: /etc/nginx/conf.d/{{item[1]}}.conf
    regexp: '^        listen       [::]:80 default_server;'
    line:   '#        listen       [::]:80 default_server;'
  loop: "{{q('dict',sites)| product(sitios_activos.stdout_lines)|list}}"
  when: item[1] != item[0].key
  notify: restart nginx

- name: Desactivando los sitos que no estén en la clave de variable sitio 3/5 linea   server_name  _;
  lineinfile:
    path: /etc/nginx/conf.d/{{item[1]}}.conf
    regexp: '^        server_name  _;'
    line:   '#        server_name  _;'
  loop: "{{q('dict',sites)| product(sitios_activos.stdout_lines)|list}}"
  when: item[1] != item[0].key
  notify: restart nginx

- name: Desactivando los sitos que no estén en la clave de variable sitio 4/5  linea root  /usr/share/nginx/html;
  lineinfile:
    path: /etc/nginx/conf.d/{{item[1]}}.conf
    regexp: '^        root         /usr/share/nginx/html;'
    line:   '#        root         /usr/share/nginx/html;'
  loop: "{{q('dict',sites)| product(sitios_activos.stdout_lines)|list}}"
  when: item[1] != item[0].key
  notify: restart nginx
  
  
- name: Desactivando los sitos que no estén en la clave de variable 5/5 sitio proxy_pass recibe el keyword y lo pasa al upstream
  lineinfile:
    path: /etc/nginx/conf.d/{{item[1]}}.conf
    regexp: "^        proxy_pass http://{{ item[1]}};"
    line:   "#        proxy_pass http://{{ item[1] }};"
  loop: "{{q('dict',sites)| product(sitios_activos.stdout_lines)|list}}"
  when: item[1] != item[0].key
  notify: restart nginx
# para centos 8 selinux: hay que configurar los permisos.
#[root@lb01 nginx]#  setsebool httpd_can_network_connect 1 -P
#[root@lb01 nginx]# setsebool -P httpd_graceful_shutdown 1
#[root@lb01 nginx]# setsebool -P httpd_can_network_relay 1
#[root@lb01 nginx]# setsebool -P nis_enabled 1


- name: Set httpd_can_network_connect flag on and keep it persistent across reboots
  seboolean:
    name: httpd_can_network_connect
    state: yes
    persistent: yes

- name: Set httpd_can_network_connect flag on and keep it persistent across reboots
  seboolean:
    name: httpd_graceful_shutdown
    state: yes
    persistent: yes

- name: Set httpd_can_network_connect flag on and keep it persistent across reboots
  seboolean:
    name: httpd_can_network_relay
    state: yes
    persistent: yes

- name: Set httpd_can_network_connect flag on and keep it persistent across reboots
  seboolean:
    name: nis_enabled
    state: yes
    persistent: yes

- name: chequear que haya iniciado nginx
  systemd:
      name: nginx
      state: started
      enabled: yes
#https://upcloud.com/community/tutorials/configure-load-balancing-nginx/ 
